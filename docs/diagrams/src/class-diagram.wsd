@startuml class-diagram 

class Scheduler {
    - basePeriod: int 
    - tasks: list<Task*>
    - timer: Timer
    - elapsedTime: int
    + Scheduler(basePeriod: int)
    + addTask(task:Task*): bool
    + schedule()
}

class Timer {
    + Timer()
    + setupFreq(freq: int)
    + setupPeriod(perido: int)
    + waitForNextTick()
}

Scheduler *-up- Timer

abstract class Task {
    - myPeriod: int
    - elapsedTime: int
    - actualState: State*
    + Task(period: int)
    + init(state: State*)
    + stateTransition(nextState: State*)
    + execute()
    + updateAndCheckTime(basePeriod: int): bool
}

Scheduler *-right- Task

class MainTask 
Task <|-- MainTask

class DispensingTask
Task <|-- DispensingTask

class SelfTestingTask
Task <|-- SelfTestingTask

abstract class State {
    - task: Task*
    + setTask(task: Task*)
    + getTask(): Task*
    + {abstract} handle()
}

Task o-right- State


@enduml