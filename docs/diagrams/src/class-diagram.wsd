@startuml class-diagram 

class Scheduler {
    - basePeriod: int 
    - tasks: list<Task*>
    - timer: Timer
    - elapsedTime: int
    + Scheduler(basePeriod: int)
    + addTask(task:Task*): bool
    + schedule()
}

interface Task {
    + init(state: State*)
    + stateTransition(nextState: State*)
    + execute()
    + updateAndCheckTime(basePeriod: int): bool
    + getMachine(): Machine*
}

Scheduler "1" *-right-> "*" Task

abstract class BaseTask {
    - myPeriod: int
    - elapsedTime: int
    - currentState: State*
    - machine: Machine*
    - actualState: State*
    + Task(period: int)
    + init(state: State*)
    + stateTransition(nextState: State*)
    + execute()
    + updateAndCheckTime(basePeriod: int): bool
    + getMachine(): Machine*
}

Task <|-- BaseTask

class MainTask 
BaseTask <|-- MainTask

class DispensingTask
BaseTask <|-- DispensingTask

class SelfTestingTask
BaseTask <|-- SelfTestingTask

abstract class State {
    - task: Task*
    + setTask(task: Task*)
    + getTask(): Task*
    + {abstract} handle()
}

Task o-right-> State
State o-left-> Task

class InitState { }
class ReadyState { }

State <|-- InitState
State <|-- ReadyState

interface Machine {
    + getSelectedProduct() : Product*
    + selectProduct(product: Product*)
    + displayMessage(msg: String)
    + make()
    + isDispensing(): bool
    + isAvailable(): bool
}

Machine --o Task


@enduml