@startuml class-diagram 

class Scheduler {
    - basePeriod: int 
    - tasks: list<Task*>
    - timer: Timer1
    - elapsedTime: int
    + Scheduler(basePeriod: int)
    + addTask(task:Task*): bool
    + schedule()
}

interface Task {
    + init(state: State*)
    + stateTransition(nextState: State*)
    + execute()
    + updateAndCheckTime(basePeriod: int): bool
    + getMachine(): Machine*
}

Scheduler "1" *-right-> "*" Task

abstract class BaseTask implements Task {
    - myPeriod: int
    - elapsedTime: int
    - currentState: State*
    - machine: Machine*
    - actualState: State*
    + Task(period: int)
    + init(state: State*)
    + stateTransition(nextState: State*)
    + execute()
    + updateAndCheckTime(basePeriod: int): bool
    + getMachine(): Machine*
}

class MainTask extends BaseTask
class DispensingTask extends BaseTask
class SelfTestingTask extends BaseTask
class CommunicationTask extends BaseTask

note right of State
State pattern: all the 
concrete states extends 
this abstract class
re-defining the handle()
method.
end note
abstract class State {
    - task: Task*
    + setTask(task: Task*)
    + getTask(): Task*
    + {abstract} handle()
}

Task o-right-> State
State o-left-> Task

interface Machine {
    + updateSugarLevel(): bool
    + updateSelectedProduct(): bool
    + refill()
    + displaySelections()
    + make()
    + isMaking(): bool
    + test()
    + isTesting(): bool
    + getMachineTemperature(): float
    + detectingSomeone(): bool
    + setMachineState(MachineState state)
    + getMachineState(): MachineState
    + getInfos(): String
}

Machine --o Task

note right of MachineState
The predefined states in 
which the machine can be. 
This is used for a shared 
variable for orchestrating
all the tasks.
end note
enum MachineState {
    READY,
    DISPENSING,
    ASSISTANCE,
    TESTING,
    SLEEPING
}

Machine -right-* MachineState

interface Product {
    + consume()
    + refill(quantity: int)
    + getLeftQuantity(): int
    + isAvailable(): bool
    + toString(): String
}

Machine -left-o Product


@enduml